main_folder = r"\\solon.prd\files\P\Global\Users\C63954\UserData\Desktop\Work_fromARG_Covid\RL\\"  file_retu=main_folder+"Anom_Trend_CPD.xlsx"excel_pca="PCs_diff_timeframes.xlsx"import osos.chdir(main_folder)from RL_PCA_Par_Func import *#q_sel_most_relevant=[7,9,10,11,12,13,20,21,24,25,31,36,37,39,40]# PC_1_R_100 level & dif + Prob Regimedif,ann,idx,target,validating,ts,div_set,q_sel=20,math.sqrt(252),1,5,'Y',int(2*500_000),40,37sel_ret=['LG30TRUU Index','SPX Index','LUATTRUU Index']targ_col_plain = [c.replace(' Index','') for c in sel_ret]pca=read_excel(excel_pca,"Sheet1",h=0).set_index('Dates').sort_index().drop_duplicates()['PC_1_R100']pca_dif = pca.diff(dif).rename('PCA_Dif').dropna()pca=pca.shift(dif).dropna()ret=read_excel(file_retu,"Prices",h=1).set_index('Dates').sort_index().drop_duplicates()[sel_ret]markov =ret[sel_ret[idx]].pct_change(periods=1)markov=markov[markov.index > dateutil.parser.parse('1991-04-15')]high_vol=markov_calculus(markov)#high_vol=high_vol.rolling(40).mean()high_vol=high_vol.rename('High_Vol')fcst_w=ret.pct_change(periods=1).shift(-1)ret=ret.pct_change(periods=target).shift(-target)#final=pd.concat([pca,pca_dif,high_vol,ret], axis=1)final=pd.concat([high_vol,ret], axis=1)fcst=final.iloc[-target:,:]final.dropna(inplace=True)if validating=='N':        spl_df = len(final)    ret_now=fcst_w.iloc[-target:,:]else:    final,idxs_ts=change_order_df(final,q_sel,div_set)    spl_df = len(final)-len(idxs_ts)    fcst_w=fcst_w.loc[idxs_ts,:]print('\nds_tested\n{}'.format(idxs_ts))time.sleep(3)# Trainx=np.round(final.drop(sel_ret,axis=1).astype('float32').to_numpy(),4)y=np.round(final[sel_ret].astype('float32').to_numpy(),4) l_rew,l_act,l_tar,l_i,l_obs,l_act_n,l_ben = [],[],[],[],[],[],[]env_tr=Assets(x[:spl_df],y[:spl_df],l_rew,l_act,l_tar,l_i,l_obs,l_act_n,l_ben,idx)model = A2C("MlpPolicy",env_tr, verbose=1)env_tr.reset()model.learn(total_timesteps=ts,reset_num_timesteps=False)print_text('Finished Learning')# Test Setl_rew,l_act,l_tar,l_i,l_obs,l_act_n,l_ben = [],[],[],[],[],[],[] env_ts=Assets(x[spl_df:],y[spl_df:],l_rew,l_act,l_tar,l_i,l_obs,l_act_n,l_ben,idx)env_ts.reset()rew,ep_len = evaluate_policy(model,env_ts,n_eval_episodes=1,return_episode_rewards=True)print_text('The_End_Of_Test')daily_rew=(fcst_w.values * pd.DataFrame(env_ts.l_act_n, index=idxs_ts,columns=targ_col_plain).fillna(0).values).sum(axis=1)multi = fcst_w[sel_ret[1]]*0.55+fcst_w[sel_ret[2]]*0.25+fcst_w[sel_ret[0]]*0.1df_gr_ts=make_df_gr(daily_rew,multi,env_ts.l_act_n,targ_col_plain,idxs_ts)tit ='FROM_'+str(idxs_ts[0])[2:7]+'_TO_'+str(idxs_ts[-1])[2:7]+'_vs_Bench_Port'plot_return(df_gr_ts,['Rew_Cum','Bench_Cum'],tit)weights_plot_divided(df_gr_ts,targ_col_plain)print('IR vs Ben_Port {}'.format(IR(df_gr_ts,'Rew','Bench',len(df_gr_ts),ann)))#save_to_doc('Validation_using_Regimes_'+str(target)+'d.docx')multi = fcst_w[sel_ret[1]]*1df_gr_ts=make_df_gr(daily_rew,multi,env_ts.l_act_n,targ_col_plain,idxs_ts)tit = tit.replace('Bench_Port','SPX')plot_return(df_gr_ts,['Rew_Cum','Bench_Cum'],tit)print('IR vs SPX {}'.format(IR(df_gr_ts,'Rew','Bench',len(df_gr_ts),ann)))Daily_vs_Bench_Port_t5d_PCA_Markov=[0.4,-0.2,-0.7,0.6,-0.9,1.3,0.2,-0.8,-0.1,-0.2,-0.3,2,-0.5,-0.6,-0.3]Daily_vs_SPX_t5d_PCA_Markov=[-0.4,-0.4,-0.8,-0.4,0,1.2,-0.6,0,0,0,-0.7,-0.3,0,0,-0.8]IRs(Daily_vs_Bench_Port_t5d_PCA_Markov,10,1,'\nVs_Bench_Port')IRs(Daily_vs_SPX_t5d_PCA_Markov,10,1,'\nVs_SPX')# Current FCSTxf=np.round(fcst.drop(sel_ret,axis=1).astype('float32').to_numpy(),4)yf=np.round(fcst[sel_ret].astype('float32').fillna(0).to_numpy(),4) l_rew,l_act,l_tar,l_i,l_obs,l_act_n,l_ben = [],[],[],[],[],[],[] env_f=Assets(xf,yf,l_rew,l_act,l_tar,l_i,l_obs,l_act_n,l_ben,idx)env_f.reset()rew, ep_len = evaluate_policy(model, env_f, n_eval_episodes=1, return_episode_rewards=True)print_text('Current Fcst')fcst_rew=(ret_now.values * pd.DataFrame(env_f.l_act_n, index=fcst.index,columns=targ_col_plain).fillna(0).values).sum(axis=1)multi = ret_now[sel_ret[1]]*0.55+ret_now[sel_ret[2]]*0.25+ret_now[sel_ret[0]]*0.1fcst_w=make_df_gr(fcst_rew,multi,env_f.l_act_n,targ_col_plain,fcst.index)fcst_w=fcst_w.iloc[:-1,:]plot_return(fcst_w,['Rew_Cum','Bench_Cum'],'Live vs Bench_Port . IR: '+str(IR(fcst_w,'Rew','Bench',len(fcst_w),ann)))weights_plot_divided(fcst_w,targ_col_plain)multi = ret_now[sel_ret[1]]*1fcst_w=make_df_gr(fcst_rew,multi,env_f.l_act_n,targ_col_plain,fcst.index)fcst_w=fcst_w.iloc[:-1,:]plot_return(fcst_w,['Rew_Cum','Bench_Cum'],'Live vs SPX. IR: '+str(IR(fcst_w,'Rew','Bench',len(fcst_w),ann)))weights_plot_divided(fcst_w,targ_col_plain)